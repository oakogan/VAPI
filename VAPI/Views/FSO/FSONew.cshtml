@using System.Collections.Generic;
@using System.Linq;
@model VAPI.Models.CommonModel

<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
@*<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>*@

<script type="text/javascript">
    function UpdateDopwDownSpecs(specIdString)
    {
        var currentValue = document.getElementById("UpdatedSpecs").value;
        //alert(specIdString);
        document.getElementById("UpdatedSpecs").value = currentValue + "*" + specIdString;
    }

    function UpdateSpecs(specIdString) {
        var currentValue = document.getElementById("UpdatedSpecs").value;

        document.getElementById("UpdatedSpecs").value = currentValue + "*" + specIdString;
        //alert("Updated specs: " + document.getElementById("UpdatedSpecs").value);
    }
</script>

@if (Model == null || Model.Trims == null || Model.Tabs == null)
{
    <div> Empty Model</div>
    return;
}

@using (Html.BeginForm("FSOSave", "FSO", FormMethod.Post, new { id = "form", name = "form", ng_show = "selectedMonth != null" }))
{
    <style>
        table {
            font-family: arial, sans-serif;
            border-collapse: collapse;
            width: 100%;
        }

        td, th {
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
        }

        tr:nth-child(even) {
            background-color: #dddddd;
        }
    </style>

    @Html.HiddenFor(model => Model.ContextItemId)
    @Html.HiddenFor(model => Model.UpdatedSpecs)
    @Html.HiddenFor(model => Model.PreviewUrl)

    <div class="container">
        <h1>@Model.SeriesItemName</h1>
        <h2>@Html.Sitecore().Field("SOP Matrix Guid", Sitecore.Context.Item)</h2> <input type="submit" name="submit" value="Save Your Inputs" /><br /><br />
        <ul class="nav nav-tabs">
            @foreach (Sitecore.Data.Items.Item tab in Model.Tabs)
                {
                    string active = (Model.Tabs.IndexOf(tab) == 0) ? "active" : "";
                    string hrefString1 = "#menu" + Model.Tabs.IndexOf(tab).ToString();
                <li class="@active"><a href="@hrefString1">@tab.Name</a></li>
            }
        </ul>

        <div class="tab-content">
            @foreach (Item tab in Model.Tabs)
                {
                    string active = (Model.Tabs.IndexOf(tab) == 0) ? "active in" : "";
                    string hrefString2 = "menu" + Model.Tabs.IndexOf(tab).ToString();
                    int colSpan = Model.Trims.Count + 1;

                <div id="@hrefString2" class="tab-pane fade @active">
                    <table>
                        <tr>
                            <td style="max-width:200px;">Katashiki</td>
                            @foreach (Item trim in Model.Trims)
                                {
                                <td>@Html.Sitecore().Field("Katashiki", trim)</td>

                                }
                        </tr>
                        <tr>
                            <td style="max-width:200px;">Katashiki Code</td>
                            @foreach (Item trim in Model.Trims)
                                {
                                <td>@Html.Sitecore().Field("Katashiki Code", trim)</td>
                                }
                        </tr>
                        <tr>
                            <td style="max-width:200px;">Description</td>

                            @foreach (Item trim in Model.Trims)
                                {
                                <td>@Html.Sitecore().Field("Description", trim)</td>
                                }
                        </tr>

                        @foreach (Item subSection in tab.GetChildren())
                        {
                            <tr style="background-color:burlywood; font-weight:bold;">
                                <td colspan="@colSpan">@subSection.Name</td>
                            </tr>
                            foreach (Item spec in subSection.GetChildren())
                            {
                                <tr>
                                    <td style="max-width:200px;">@Html.Sitecore().Field(Constants.FieldNames.NameMultiline_FieldName, spec)</td>

                                    @*Redner spec values*@

                                    @foreach (Item trim in Model.Trims)
                                    {
                                        List<string> matches = trim["SOP Matrix Guid"].Split('/').ToList();
                                        string match = matches.FirstOrDefault(x => x.Contains(spec.ID.ToString()));

                                        if (match != null)
                                        {
                                            string[] a = match.Split(':');

                                            <td>
                                                @if (FieldTypeManager.GetField(spec.Fields["Spec"]) is ValueLookupField )
                                                {
                                                    Item sourceItem = Sitecore.Context.Database.GetItem(spec.Fields["Spec"].Source);
                                                    string specIdString = "trim" + trim.ID.ToString() + "/" + spec.ID.ToString();

                                                    <select id="@specIdString" onchange="UpdateDopwDownSpecs(this.id + ':' + this.value);">
                                                        @foreach (Item option in sourceItem.GetChildren())
                                                        {
                                                            string selected = (a[1] == option.Name) ? "selected" : "";
                                                            <option @selected>@option.Name</option>
                                                        }
                                                    </select>
                                                }
                                                else if (FieldTypeManager.GetField(spec.Fields["Spec"]) is TextField && spec.TemplateID.ToString() == Constants.TemplateIDs.FreeFormSpec_TemplateId)
                                                {
                                                    string specIdString = "trim" + trim.ID.ToString() + "/" + spec.ID.ToString();
                                                   
                                                    <input id="@specIdString" onchange="UpdateSpecs(this.id + ':' + this.value);" type="text" value="@a[1]" />

                                                }
                                                else if (FieldTypeManager.GetField(spec.Fields["Spec"]) is TextField && spec.TemplateID.ToString() == Constants.TemplateIDs.PredefinedSpec_TemplateId)
                                                {
                                                    //string par = "UpdateDopwDownSpecs(" + spec.ID.ToString() + ":" + this.value);";
                                                    string specIdString = "trim" + trim.ID.ToString() + "/" + spec.ID.ToString();
                                                    <select id="@specIdString" onchange="UpdateDopwDownSpecs(this.id + ':' + this.value);">
                                                        @foreach (Item option in spec.GetChildren())
                                                        {
                                                            string selected = (a[1] == option["Name"]) ? "selected" : "";
                                                            <option @selected>@option["Name"]</option>
                                                        }
                                                    </select>
                                                }
                                            </td>
                                        }
                                        else
                                        {                                           
                                            <td>
                                                @if (FieldTypeManager.GetField(spec.Fields["Spec"]) is ValueLookupField)
                                                {
                                                    Item sourceItem = Sitecore.Context.Database.GetItem(spec.Fields["Spec"].Source);
                                                    string specIdString = "trim" + trim.ID.ToString() + "/" + spec.ID.ToString();

                                                    @*<div>
                                                       @spec["Spec"]
                                                    </div>*@

                                                        <select id="@specIdString" onchange="UpdateDopwDownSpecs(this.id + ':' + this.value);">
                                                            @foreach (Item option in sourceItem.GetChildren())
                                                            {
                                                                string selected = (@spec["Spec"] == option.Name) ? "selected" : "";
                                                                <option @selected>@option.Name</option>
                                                            }
                                                        </select>
                                                }
                                                else if (FieldTypeManager.GetField(spec.Fields["Spec"]) is TextField && spec.TemplateID.ToString() == Constants.TemplateIDs.FreeFormSpec_TemplateId)
                                                {
                                                    string specIdString = "trim" + trim.ID.ToString() + "/" + spec.ID.ToString();
                                                   
                                                    <input id="@specIdString" onchange="UpdateSpecs(this.id + ':' + this.value);" type="text" value="@spec["Spec"]" />

                                                }
                                                else if (FieldTypeManager.GetField(spec.Fields["Spec"]) is TextField && spec.TemplateID.ToString() == Constants.TemplateIDs.PredefinedSpec_TemplateId)
                                                {
                                                    string specIdString = "trim" + trim.ID.ToString() + "/" + spec.ID.ToString();
                                                    <select id="@specIdString" onchange="UpdateDopwDownSpecs(this.id + ':' + this.value);">
                                                        @foreach (Item option in spec.GetChildren())
                                                        {
                                                            string selected = (spec["Spec"] == option["Name"]) ? "selected" : "";
                                                            <option @selected>@option["Name"]</option>
                                                        }
                                                    </select>
                                                }
                                            </td>
                                        }
                                    }
                                </tr>
                            }
                        }
                    </table>
                </div>
            }
        </div>
    </div>
}

<script>
    $(document).ready(function () {       
        $(".nav-tabs a").click(function () {
            $(this).tab('show');
        });
    });
</script>

